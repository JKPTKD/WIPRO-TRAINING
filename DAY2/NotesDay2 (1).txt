Day 2:
------

logical
	and 
	or 
	not
	
res = 'within Range' if 20 < 30 and 20 > 10 else 'outside Range'
print(res)

res = 'within Range' if 20 < 30 > 10 else 'outside Range'
print(res)

res = 'within Range' if 30>20> 10 else 'outside Range'
print(res)

res = 'within Range' if 10<20<30 else 'outside Range'
print(res)

res = 'within Range' if 30>20 and 20 > 10 else 'outside Range'
print(res)

res = 'within Range' if 10<20 and 20 < 30 else 'outside Range'
print(res)
========================================================
Based on conditional operator on numbers:
1. Check whether the given number is even or odd.
2. print correct suffix for any given number 
Examples:
	num  --> 1
		1st 
	num --> 11
		11th 
	num --> 23
		23rd
	num --> 52
		52nd 
		
Based on age:
3. Voting eligibility
4. Driving License eligibility and validity
	18+ --> 20 yrs validity
	35+ --> 10 Yrs validity
	45+ --> 5 Yrs validity
Based on shopping list:
5. Range of prices for a single item. You choose the item and specify the range.

====================================================
	or --> if any one of the conditions is true
	not --> negation of your condition 
=====================================================	
bitwise operators	
-----------------
	& --> bitwise and operator 
	| --> bitwise or operator 
	^ --> bitwise XOR operator
	~ --> bitwise one's complement operator 
	<< --> bitwise left-shift operator
	>> --> bitwise right-shift operator
------------------------------------------------------
Bitwise AND:
------------
	0 AND 0 --> 0
	1 AND 0 --> 0
	0 AND 1 --> 0
	1 AND 1 --> 1

1. Check the status of the bit pos on any given number.
num: 10 
bit pos: 3
			1010 --> num --> 10
			3 bit on number 10 is ON	

	res = 'ON' if num & 1 << pos else 'OFF'
	print(f'{pos} bit on num {num} is {res}')
	
	1010 --> 
	----
	0001 << 3  --> 1000
	0001 << 2  --> 0100
	
	1000  --> 8 --> 1 << 3 
			AND 
	1010  --> 10 --> num 
---------
	1000 --> 8 --> 
-------------------

	num & 1 << 2
	
	1010
	0100
---------
    0000 --> 0
		
		0 --> FALSE
		any --> TRUE
		
---------	
==========================================================
2. Toggle the given bit position on any given number.
Sample input #1:
	num : 10
	pos : 3

	#1010 --> 0010 --> 2  #explaination part
	after toggling 3 bit on number 10 is 2
Sample input #2:
	num : 10
	pos : 2

	#1010 --> 1110 --> 14 #explaination part
	after toggling 2 bit on number 10 is 14
==========================================================
3. Toggle the nibble(combination of 4 bits) based on the bit position on a given number.
Sample input #1:
---------------
	num , pos = 10, 2
	1010 --> 10 #Explaination
	0101 --> 5  #Explaination
	After toggling 0 nibble number on 10 is 5
Sample input #2:
---------------
	num , pos = 10, 5
	#0000 1010 --> 10  #Explaination
	#1111 1010 --> 250 #Explaination
	#128 + 64 + 32 + 16 + 10 --> 250 #Explaination  
	After toggling 1 nibble number on 10 is 250
	
	0000 0000 0000 0000 0000 0000 0000 1010 
	7     6    5    4    3    2    1    0
	0, 1, 2, 3 --> 0th nibble
	4, 5, 6, 7 --> 1st nibble
	0x0000000A
	
	0xA ---> 0000 1010 --> 10
	0xFA ---> 1111 1010 --> 250

Notes Addition:	
---------------
	You Can explore on right-shift rotation and left-shift rotation.	
===========================================================
Next topic:
-----------
	Python I/O Expressions:
	-----------------------
		Using the input() function
		output using print() function
-----------------------------------------------------------
	txtVar = input('Text to be printed/prompted')
		--> return type of input function is string
		int()
		float()
optional:
4. right-shift rotation
5. left-shift rotation

mandatory:
6. make a copy of your 'Day of the week' problem, modify it so it takes input from keyboard using input().
===========================================================
formatted Output is done using print()
--------------------------------------
1. using C-Style.
	In earlier versions they tried to copy C- Style of formatting output(printf with format specifiers)
		(
		 %d --> integer
		 %s --> string
		 %f  --> float 	
		)
	Syntax is 
		print("string with format specifiers" %(variables))

Problem #1:
-----------	
 Id   Name				 Sal
 1001 Raju Bhai           125000.00      	

Problem #2:
-------------------------------------------
 Id   Name				 Sal
-------------------------------------------
 1001 Raju Bhai           125000.00      	
-------------------------------------------

Problem #3:
 -------------------------------------------
| Id   |  Name				 |  Sal         |
 -------------------------------------------
| 1001 |  Raju Bhai          |  125000.00   |   	
 -------------------------------------------


2. str.format()

print('Id: {}\tName: {}\t\tSal: {}'.format(id, name, sal))

3. f'strings' 
	The support for f'strings were introduced in 3.6 onwards.

	print(f'Id: {id}\tName: {name}\t\tSal: {sal}')	
------------------------------------------------
Presented today
================================================
1. Aakarsh N P 
2. Saurabh Saw 
3. Sagar Choudhary
4. Abhishek Verma
5. Gourab Das 
================================================
